--[[
	Desktop in ComputerCraft
	by Creator
	for TheOS
]]--
--Variables--
local textutilsserialize = textutils.serialize
local textutilsunserialize = textutils.unserialize
local w,h = term.getSize()
local Settings = {}
local result = {}
local Main = {}
local QuickSettings = {}
local MatchingColors = {}

--Functions--
local function readFile(_path)
	local file = fs.open(_path,"r")
	local data = file.readAll()
	file.close()
	return data
end

local function split(str,sep)
	local buffer = {}
	for token in str:gmatch(sep) do
		buffer[#buffer+1] = token
	end
	return buffer
end

--Loading settings--
local buffer = readFile("TheOS/Desktop/Settings")
Settings = textutils.unserialize( buffer )

local buffer = readFile("TheOS/Desktop/MatchingColors")
MatchingColors = textutilsunserialize(buffer)

--Object table--
Main.Button = {
	quickSettings = {
		name = "quickSettings",
		label = "^",
		xPos = 1,
		yPos = h,
		xLength = 1,
		yLength = 1,
		xTextPos = 1,
		yTextPos = 1,
		fgColor = colors.white,
		bgColor = Settings.bgColor,
		returnValue = "quickSettings",
	},
	windowPlus = {
		name = "windowPlus",
		label = ">",
		xPos = w,
		yPos = 1,
		xLength = 1,
		yLength = 1,
		xTextPos = 1,
		yTextPos = 1,
		fgColor = colors.white,
		bgColor = Settings.bgColor,
		returnValue = "windowPlus",
	},
	windowMinus = {
		name = "windowMinus",
		label = "<",
		xPos = 1,
		yPos = 1,
		xLength = 1,
		yLength = 1,
		xTextPos = 1,
		yTextPos = 1,
		fgColor = colors.white,
		bgColor = Settings.bgColor,
		returnValue = "windowMinus",
	},
}

QuickSettings.Button = {
	Close = {
		name = "Close",
		label = "x",
		xPos = w,
		yPos = 1,
		xLength = 1,
		yLength = 1,
		xTextPos = 1,
		yTextPos = 1,
		fgColor = colors.black,
		bgColor = colors.white,
		returnValue = "Close",
	},
	Right = {
		name = "Right",
		label = ">",
		xPos = w-1,
		yPos = 4,
		xLength = 1,
		yLength = 3,
		xTextPos = 1,
		yTextPos = 2,
		fgColor = Settings.bgColor,
		bgColor = colors.white,
		returnValue = "Right",
	},
	Left = {
		name = "Left",
		label = "<",
		xPos = 2,
		yPos = 4,
		xLength = 1,
		yLength = 3,
		xTextPos = 1,
		yTextPos = 2,
		fgColor = Settings.bgColor,
		bgColor = colors.white,
		returnValue = "Left",
	}
}

QuickSettings.ColorField = {
	TopBar = {
		name = "TopBar",
		xPos = 1,
		yPos = 1,
		xLength = w,
		yLength = 1,
		color = colors.white,
	},
}

QuickSettings.BetterPaint = {
	Restart = {
		xPos = 4,
		yPos = 2,
		name = "Restart",
		path = "TheOS/Desktop/QuickSettings/restart.ico",
		yLength = 5,
		xLength = 7,
		returnValue = "reboot",
		label = "Restart",
		labelFg = colors.black,
		labelBg = MatchingColors[Settings.bgColor]["quickSettings"],
	},
	Shutdown = {
		xPos = 22,
		yPos = 2,
		name = "Shutdown",
		path = "TheOS/Desktop/QuickSettings/shutdown.ico",
		yLength = 5,
		xLength = 7,
		returnValue = "shutdown",
		label = "Shutdown",
		labelFg = colors.black,
		labelBg = MatchingColors[Settings.bgColor]["quickSettings"],
	},
	Settings = {
		xPos = 13,
		yPos = 2,
		name = "Settings",
		path = "TheOS/Desktop/QuickSettings/settings.ico",
		yLength = 5,
		xLength = 7,
		returnValue = "settings",
		label = "Settings",
		labelFg = colors.black,
		labelBg = MatchingColors[Settings.bgColor]["quickSettings"],
	},
}

QuickSettings.Text = {
	Label = {
		name = "Label",
		text = "QuickSettings",
		xPos = w/2-6,
		yPos = 1,
		bgColor = colors.white,
		fgColor = Settings.bgColor
	},
}

--Initializing GUI components
local gui = Interact.Initialize()
local mainLayout = gui.Layout.new({xPos = 1,yPos = 1,xLength = w,yLength = h})
local quickSettingsLayout = gui.Layout.new({xPos = 1,yPos = h-7,xLength = w,yLength = h, nilClick = true})

--Initializing Buttons--
--Main--
local mainLayoutTable = {}
mainLayoutTable = gui.loadObjects(Main)
mainLayoutTable.mainBgColor = gui.BackgroundColor.new({color = Settings.bgColor})

--QuickSettings--
local quickSettingsLayoutTable = {}
quickSettingsLayoutTable.Text = {}
quickSettingsLayoutTable = gui.loadObjects(QuickSettings)
quickSettingsLayoutTable.quickSettingsBgColor = gui.BackgroundColor.new({color = MatchingColors[Settings.bgColor]["quickSettings"]})
--quickSettingsLayoutTable.Text.Test = gui.Text.new(QuickSettings.Text.Test)

--Initializing structures--
--Main--
for i,v in pairs(mainLayoutTable.Button) do
	mainLayout:addButton(mainLayoutTable.Button[i]:returnData())
end
mainLayout:addBackgroundColor(mainLayoutTable.mainBgColor:returnData())

--QuickSettings--
for i,v in pairs(quickSettingsLayoutTable.Button) do
	quickSettingsLayout:addButton(quickSettingsLayoutTable.Button[i]:returnData())
end
quickSettingsLayout:addBackgroundColor(quickSettingsLayoutTable.quickSettingsBgColor:returnData())
quickSettingsLayout:addColorField(quickSettingsLayoutTable.ColorField.TopBar:returnData())
quickSettingsLayout:addBetterPaint(quickSettingsLayoutTable.BetterPaint.Restart:returnData())
quickSettingsLayout:addBetterPaint(quickSettingsLayoutTable.BetterPaint.Shutdown:returnData())
quickSettingsLayout:addBetterPaint(quickSettingsLayoutTable.BetterPaint.Settings:returnData())
quickSettingsLayout:addText(quickSettingsLayoutTable.Text.Label:returnData())

function writeTable()
	file = fs.open("TheOS/Desktop/MatchingColors","w")
	file.write(textutilsserialize({
		[8192] = {
			name = "green",
			quickSettings = colors.lime,
		},
	}))
	--for i,v in pairs (colors) do
	--	file.write(tostring(i).." "..tostring(v).."\n")
	--end
	file.close()
end

--writeTable()

--[[term.setCursorPos(1,1)
term.clear()
for i,v in pairs(quickSettingsLayout) do
	print(i)
end
os.pullEvent()]]--

--Code--
while true do
	mainLayout:draw()
	local result = gui.eventHandler(mainLayout)
	if result[1] == "Button" then
		if result[2] == "quickSettings" then
			quickSettingsLayout:draw()
			local notClose = true
			while notClose do
				local answer = gui.eventHandler(quickSettingsLayout)
				if answer[1] == "Button" then
					if answer[2] == "reboot" then
						os.reboot()
					elseif answer[2] == "shutdown" then
						os.shutdown()
					elseif answer[2] == "Close" then
						notClose = false
					end
				elseif answer[1] == "Nil" then
					if answer[2] == "Nil" then
						notClose = false
					end
				end
			end
		end
	end
end
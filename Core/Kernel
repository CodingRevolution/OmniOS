--Kernel--
--Variables--
local routines = {}
local arguments = {}
local args = {...}
local _funcPath = args[1]
local _title = args[2]
table.remove(args,2)
table.remove(args,1)

--Functions--
function getPermission(base,program)
	local f = fs.open(base.."/"..program..".permission")
	local m = f.readAll()
	f.close()
	return m
end

function newProcess(funcPath,title,_arguments)
	local routineIsPresent = false
	local func
	local buffer = {}
	local permission = nil
	local base = ""
	local program = nil
	local environement = {}
	for i,v in pairs(routines) do
		if i == title then
			routineIsPresent = true
		end
	end
	routines[title] = ""
	if routineIsPresent then return false end
	if type(funcPath) == "string" then
		func = loadfile(funcPath)
	else return false end
	
	for token in string.gmatch(funcPath,"(/[^/]+)") do
		buffer[#buffer+1] =  token
	end
	for i = 1, #buffer-1 do
		base = base..buffer[i]
	end
	program = buffer[#buffer]
	if buffer[#buffer-2] == "Programs" then
		permission = getPermission(base,program)
		environement = Sandbox.newEnvironement(funcPath,permission)
	else
		setmetatable(environement,{_index = _G})
	end
	setfenv(func,environement)
	routines[title] = coroutine.create(func)
	arguments[title] = _arguments
end

function coroutineManager()
	while true do
	os.pullEvent()
		for i,v in pairs(routines) do
			print("Resuming coroutine...")
			os.pullEvent()
			coroutine.resume(v,unpack(arguments[i]))
		end
	end
end

newProcess(_funcPath,_title,arguments)
term.setBackgroundColor(colors.cyan)
term.setTextColor(colors.white)
term.clear()
term.setCursorPos(1,1)
print("Launching kernel...")
print(routines)
for i,v in pairs(routines) do
	print(v)
end
--error("Fuck you, little asshole!")
os.pullEvent()
coroutineManager()
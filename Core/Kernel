--Kernel--
--Variables--
local routines = {}
local currRoutine = nil
local args = {...}
local funcPath = args[1]
local title = args[2]
table.remove(args,2)
table.remove(args,1)

--Functions--
local function getPermission(base,program)
	local f = fs.open(base.."/"..program..".permission")
	local m = f.readAll()
	f.close()
	return m
end

local function parsePath(_funcPath)
	local buffer = {}
	for token in string.gmatch(_funcPath,"[^/]+") do
		buffer[#buffer + 1] = token
	end
	return buffer
end

local function getEnvironment(nTable,_path)
	if nTable[#nTable-3] == "Programs" then
		local b = fs.open(_path..".permissions")
		local tEnv = b.readLine()
		b.close()
		if tEnv == "admin" then
			local mEnv = {}
			setmetatable(mEnv,{_index = _G})
			return mEnv
		else
			Sandbox.newEnvironement(_path, "semiadmin")
		end
	else
		local mEnv = {}
		setmetatable(mEnv,{_index = _G})
		return mEnv
	end
end

function newProcess(_funcPath,_title,_arguments)
	local path = parsePath(_funcPath)
	local env = getEnvironment(path,_funcPath)
	for i,v in pairs(routines) do
		if v == title then return false end
	end
	routines[title] = ""
	toRun = loadfile(_funcPath)
	routines[title] = coroutine.create(toRun)
end

local function coroutineManager()
	while true do
	eventData = {os.pullEvent()}
		for i,v in pairs(routines) do
			term.clear()
			coroutine.resume(v,unpack(eventData))
		end
	end
end

newProcess(funcPath,title,arguments)
term.clear()
term.setCursorPos(1,1)
print("Booting into multitasking...")
coroutineManager()
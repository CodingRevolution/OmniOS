--Kernel--
--Variables--
local routines = {}
local arguments = {}
local args = {...}
local _funcPath = args[1]
local _title = args[2]
table.remove(args,2)
table.remove(args,1)

--Functions--
function getPermission(base,program)
	local f = fs.open(base.."/"..program..".permission")
	local m = f.readAll()
	f.close()
	return m
end

function newProcess(funcPath,title,_arguments)
	local routineIsPresent = false
	local func
	local buffer = {}
	local permission = nil
	local base = ""
	local program = nil
	for i,v in pairs(routines) do
		if i == title then
			routineIsPresent = true
		end
	end
	if routineIsPresent then return false end
	if type(funcPath) == "string" then
		func = loadfile(funcPath)
	else return false end
	
	for token in string.gmatch(funcPath,"(/[^/]+)") do
		buffer[#buffer+1] =  token
	end
	for i = 1, #buffer-1 do
		base = base..buffer[i]
	end
	program = buffer[#buffer]
	if buffer[#buffer-2] == "Programs" then
		permission = getPermission(base,program)
	else
		permission = "admin"
	end
	local environement = {}
	environement = Sandbox.newEnvironement(funcPath,permission)
	routines[title] = coroutine.create(func)
	arguments[title] = unpack(_arguments)
end

function coroutineManager()
	for i,v in pairs(routines) do
		coroutine.resume(v,arguments[i])
	end
end

newProcess(args[1],args[2])
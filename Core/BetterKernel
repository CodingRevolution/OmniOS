--[[
	TheOS Kernel
	by Creator
	for TheOS &
	you to learn
	from it
]]--
local args = {...}
local w,h = term.getSize()
local currTerm = term.current()
local routines = {}
local activeRoutine = ""
local eventGlobal = true

function newRoutine(name,path,...)
	print("adding routine")
	local sName = name
	name = name.."1"
	local notUnique = true
	local tries = 1
	while notUnique do
		print("trying")
		tries = tries + 1
		if routines[name] ~= nil then
			name = name:sub(1,-2)..tostring(tries)
		else
			notUnique = false
		end
	end
	local arguments = {...}
	local function run(...)
		os.run(_G,path,...)
		print("biatch")
	end
	routines[name] = {}
	routines[name].routine = coroutine.create(run)
	if #routines == 1 then
		routines[name].window = window.create(currTerm,1,1,w-1,h,true)
		activeRoutine = name
	else
		routines[name].window = window.create(currTerm,1,1,w-1,h,false)
	end
	routines[name].title = sName
	routines[name].arguments = arguments
	routines[name].hasRun = false
	print(routines[name].routine)
end

function main()
	while true do
		print("hi")
		event = {os.pullEvent()}
		print("meh")
		if event[1] == "key" or event[1] == "mouse_click" or event[1] == "monitor_touch" then
			eventGlobal = false
		else
			eventGlobal = true
		end
		for i,v in pairs(routines) do
			print"work"
			local status = coroutine.status(routines[i].routine)
			if status == "dead" then
				routines[i] = nil
			else
				if routines[i].hasRun == false then
					routines[i].hasRun = true
					term.redirect(routines[i].window)
					coroutine.resume(routines[i].routine,unpack(routines[i].arguments))
					term.redirect(currTerm)
				else
					if i == activeRoutine then
						term.redirect(routines[i].window)
						coroutine.resume(routines[i].routine,unpack(event))
						term.redirect(currTerm)
					else
						if eventGlobal then
							term.redirect(routines[i].window)
							coroutine.resume(routines[i].routine,unpack(event))
							term.redirect(currTerm)
						end
					end
				end
			end
		end
	end
end

newRoutine(unpack(args))

main()
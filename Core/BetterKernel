--[[
	TheOS Kernel
	by Creator
	for TheOS &
	you to learn
	from it
]]--
local args = {...}
local w,h = term.getSize()
local currTerm = term.current()
local routines = {}
local routinesToKill = {}
local activeRoutine = ""
local eventGlobal = true

function newRoutine(name,func,...)
	local sName = name
	name = name.."1"
	local notUnique = true
	local tries = 1
	while notUnique do
		tries = tries + 1
		if routines[name] ~= nil then
			name = name:sub(1,-2)..tostring(tries)
		else
			notUnique = false
		end
	end
	local arguments = {...}
	routines[name] = {}
	routines[name].routine = coroutine.create(func)
	if #routines == 0 then
		routines[name].window = window.create(term.current(),1,1,w-1,h,true)
		activeRoutine = name
	else
		routines[name].window = window.create(term.current(),1,1,w-1,h,false)
	end
	routines[name].title = sName
	routines[name].arguments = arguments
	routines[name].hasRun = false
end

function main()
	os.queueEvent("slagadalahssj")
	while true do
		routinesToKill = {}
		event = {os.pullEventRaw()}
		if event[1] == "key" or event[1] == "mouse_click" or event[1] == "monitor_touch" then
			eventGlobal = false
		else
			eventGlobal = true
		end
		if (event[1] == "mouse_click" or event[1] == "monitor_touch") and event[3] == w then
			print("ma'am")
		else
			for i,v in pairs(routines) do
				local status = coroutine.status(routines[i].routine)
				if status == "dead" then
					routinesToKill[#routinesToKill+1] = i
				else
					if routines[i].hasRun == false then
						routines[i].hasRun = true
						term.redirect(routines[i].window)
						coroutine.resume(routines[i].routine,unpack(routines[i].arguments))
						term.redirect(currTerm)
					else
						if i == activeRoutine then
							term.redirect(routines[i].window)
							coroutine.resume(routines[i].routine,unpack(event))
							term.redirect(currTerm)
						else
							if eventGlobal then
								term.redirect(routines[i].window)
								coroutine.resume(routines[i].routine,unpack(event))
								term.redirect(currTerm)
							end
						end
					end
				end
			end
			for i,v in pairs(routinesToKill) do
				routines[v] = nil
			end
		end
	end
end

newRoutine(unpack(args))

main()
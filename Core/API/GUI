--Variables--
local buttonsMain = {}
local keysMain = {}
--Functions--

local function LocalAddField()
	buttonsMain[#buttonsMain+1] = {v[1],v[2],v[1]+v[3]-1,v[2]+v[4]-1,v[5]}
end

function AddField(v)
	if not pcall(LocalAddField,v) then
		print([[
		Usage:
		As an argument pass a table structured like this:
		{
			xPos,
			yPos,
			wide,
			height,
			returnValue,
		}
		]])
	end
end

local function LocalDrawButton(v)
	if v[5] ~= nil then
		paintutils.drawFilledBox(v[1],v[2],v[1]+v[3]-1,v[2]+v[4]-1,v[5])
	end
	term.setTextColor(v[9])
	term.setCursorPos(v[1]+v[6]-1,v[2]+v[7]-1)
	local textToPrint = string.sub(v[8],1,v[1]+v[3]-v[6])
	term.write(textToPrint)
	buttonsMain[#buttonsMain+1] = {v[1],v[2],v[1]+v[3]-1,v[2]+v[4]-1,v[10]}
end

function DrawButton(v)
	if not pcall(LocalDrawButton,v) then
		print([[
		Usage:
		As an argument pass a table structured like this:
		{
			xPos,
			yPos,
			wide,
			height,
			colorOfButton,
			inButtonXPosOfLabel,
			inButtonYPosOfLabel,
			label,
			textColor,
			returnValue,
		}
		You can have the option to not use the background color.
		You can do this by simply setting color of button to nil.
		]])
	end
end

function DetectButtonOrKeyHit()
	while true do
		local event, button, x, y
		repeat
			event, button, x, y = os.pullEvent()
		until (event == "mouse_click" and buttonsToTest ~= nil) or (event == "key" and keysToTest ~= nil)
		if event == "mouse_click" then
			for i,v in pairs(buttonsMain) do
				if v[1] <= x and x <= v[3] and v[2] <= y and y <= v[4] then
					return {v[5], button, x, y}
				end
			end
		elseif event == "key" then
			for i,v in pairs(keysMain) do
				if button == v[1] then
					return {v[2]}
				end
			end
		end
	end
end

function ResetButtons()
	buttonsMain = {}
end

function LocalCPrint(txt,color,bgColor,x,y,maxLenght)
	if not maxLenght == nil then
		txt = string.sub(txt,1,maxLenght)
	end
	term.setTextColor(color)
	term.setBackgroundColor(bgColor)
	term.setCursorPos(x,y)
	term.write(txt)
end

function cPrint(txt,color,bgColor,x,y,maxLenght)
	
end
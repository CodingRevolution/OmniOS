--Variables--
local buttonsMain = {}
local keysMain = {}
--Functions--

local function localAddField(minX,minY,maxX,maxX,returnV)
	buttonsMain[#buttonsMain+1] = {v[1],v[2],v[1]+v[3]-1,v[2]+v[4]-1,v[5]}
end

function addField(minX,minY,maxX,maxX,returnV)
	if not pcall(localAddField,minX,minY,maxX,maxX,returnV) then
		print([[
		Usage:
		As an argument pass a table structured like this:
		{
			xPos,
			yPos,
			wide,
			height,
			returnValue,
		}
		]])
	end
end

local function localDrawButton(xPos,yPos,wide,height,colorOfButton,inButtonXPosOfLabel,inButtonYPosOfLabel,label,textColor,returnValue)
	if v[5] ~= "nil" then
		paintutils.drawFilledBox(xPos,yPos,xPos+wide-1,yPos+height-1,colorOfButton)
	end
	term.setTextColor(v[9])
	term.setCursorPos(xPos+inButtonXPosOfLabel-1,yPos+inButtonYPosOfLabel-1)
	local textToPrint = string.sub(v[8],1,xPos+v[3]-v[6])
	term.write(textToPrint)
	buttonsMain[#buttonsMain+1] = {xPos,yPos,xPos+wide-1,yPos+height-1,returnValue}
end

function drawButton(xPos,yPos,wide,height,colorOfButton,inButtonXPosOfLabel,inButtonYPosOfLabel,label,textColor,returnValue)
	if not pcall(localDrawButton,xPos,yPos,wide,height,colorOfButton,inButtonXPosOfLabel,inButtonYPosOfLabel,label,textColor,returnValue) then
		print([[
		Usage:
		As an argument pass a table structured like this:
		{
			xPos,
			yPos,
			wide,
			height,
			colorOfButton,
			inButtonXPosOfLabel,
			inButtonYPosOfLabel,
			label,
			textColor,
			returnValue,
		}
		You can have the option to not use the background color.
		You can do this by simply setting color of button to nil.
		]])
	end
end

function detectButtonOrKeyHit()
	while true do
		local event, button, x, y
		repeat
			event, button, x, y = os.pullEvent()
		until (event == "mouse_click" and buttonsToTest ~= nil) or (event == "key" and keysToTest ~= nil)
		if event == "mouse_click" then
			for i,v in pairs(buttonsMain) do
				if v[1] <= x and x <= v[3] and v[2] <= y and y <= v[4] then
					return {v[5], button, x, y}
				end
			end
		elseif event == "key" then
			for i,v in pairs(keysMain) do
				if button == v[1] then
					return {v[2]}
				end
			end
		end
	end
end

function resetButtons()
	buttonsMain = {}
end

local function localCPrint(v)
	if not v[6]t == "nil" then
		v[1] = string.sub(v[1],1,v[6])
	end
	term.setTextColor(v[2])
	if not v[3] == nil then
		term.setBackgroundColor(v[3])
	end
	term.setCursorPos(v[4],v[5])
	term.write(v[1])
end

function cPrint(v)
	if not pcall(localCPrint,v) then
		print([[
			Usage:
			Arguments are as follws:
			{
			Text to print
			Text color
			Background color
			xPos
			yPos
			Maximal lenght of the string
			}
			Maximal lenght of the string can be left "nil" with qoutes
		]])
	end
end
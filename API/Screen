function new( parent, nX, nY, nWidth, nHeight)

	if type( parent ) ~= "table" or
	   type( nX ) ~= "number" or
	   type( nY ) ~= "number" or
	   type( nWidth ) ~= "number" or
	   type( nHeight ) ~= "number" then
		error( "Expected object, number, number, number, number, [boolean]", 2 )
	end

	if parent == term then
		parent = term.current()
	end

	-- Setup
	local nCursorX = 1
	local nCursorY = 1

	-- Helper functions
	local function updateCursorPos()
		if nCursorX >= 1 and nCursorY >= 1 and
		   nCursorX <= nWidth and nCursorY <= nHeight then
			parent.setCursorPos( nX + nCursorX - 1, nY + nCursorY - 1 )
		else
			parent.setCursorPos( 0, 0 )
		end
	end

	local window = {}

	-- Terminal implementation
	function window.write( sText )
		local nLen = sText:len()
		updateCursorPos()
		for i = 1, nLen do
			if nCursorX <= nWidth and nCursorY <= nHeight then
				parent.write(sText:sub(nLen,nLen))
				nCursorX = nCursorX + 1
			end
		end
	end

	function window.clear()
		local tEmpty = { { sEmpty, nTextColor, nBackgroundColor } }
		for y=1,nHeight do
			tLines[y] = tEmpty
		end
		if bVisible then
			redraw()
			updateCursorColor()
			updateCursorPos()
		end
	end

	function window.clearLine()
		if nCursorY >= 1 and nCursorY <= nHeight then
			tLines[ nCursorY ] = { { sEmpty, nTextColor, nBackgroundColor } }
			redrawLine( nCursorY )
			updateCursorColor()
			updateCursorPos()
		end
	end

	function window.getCursorPos()
		return nCursorX, nCursorY
	end

	function window.setCursorPos( x, y )
		nCursorX = math.floor( x )
		nCursorY = math.floor( y )
			updateCursorPos()
	end

	function window.setCursorBlink( blink )
		bCursorBlink = blink
		if bVisible then
			updateCursorBlink()
		end
	end

	function window.isColor()
		return parent.isColor()
	end

	function window.isColour()
		return parent.isColor()
	end

	local function setTextColor( color )
		if not parent.isColor() then
			if color ~= colors.white and color ~= colors.black then
				error( "Colour not supported", 3 )
			end
		end
		nTextColor = color
		if bVisible then
			updateCursorColor()
		end
	end

	function window.setTextColor( color )
		setTextColor( color )
	end

	function window.setTextColour( color )
		setTextColor( color )
	end

	local function setBackgroundColor( color )
		if not parent.isColor() then
			if color ~= colors.white and color ~= colors.black then
				error( "Colour not supported", 3 )
			end
		end
		nBackgroundColor = color
	end

	function window.setBackgroundColor( color )
		setBackgroundColor( color )
	end

	function window.setBackgroundColour( color )
		setBackgroundColor( color )
	end

	function window.getSize()
		return nWidth, nHeight
	end

	function window.scroll( n )
		if n ~= 0 then
			local tNewLines = {}
			local tEmpty = { { sEmpty, nTextColor, nBackgroundColor } }
			for newY=1,nHeight do
				local y = newY + n
				if y >= 1 and y <= nHeight then
					tNewLines[newY] = tLines[y]
				else
					tNewLines[newY] = tEmpty
				end
			end
			tLines = tNewLines
			if bVisible then
				redraw()
				updateCursorColor()
				updateCursorPos()
			end
		end
	end

	-- Other functions
	function window.setVisible( bVis )
		if bVisible ~= bVis then
			bVisible = bVis
			if bVisible then
				window.redraw()
			end
		end
	end

	function window.redraw()
		if bVisible then
			redraw()
			updateCursorBlink()
			updateCursorColor()
			updateCursorPos()
		end
	end

	function window.restoreCursor()
		if bVisible then
			updateCursorBlink()
			updateCursorColor()
			updateCursorPos()
		end
	end

	function window.getPosition()
		return nX, nY
	end

	function window.reposition( nNewX, nNewY, nNewWidth, nNewHeight )
		nX = nNewX
		nY = nNewY
		if nNewWidth and nNewHeight then
			sEmpty = string.rep( " ", nNewWidth )
			local tNewLines = {}
			local tEmpty = { { sEmpty, nTextColor, nBackgroundColor } }
			for y=1,nNewHeight do
				if y > nHeight then
					tNewLines[y] = tEmpty
				else
					if nNewWidth == nWidth then
						tNewLines[y] = tLines[y]
					elseif nNewWidth < nWidth then
						tNewLines[y] = lineSub( tLines[y], 1, nNewWidth )
					else
						tNewLines[y] = lineJoin( tLines[y], { { string.sub( sEmpty, nWidth + 1, nNewWidth ), nTextColor, nBackgroundColor } } )
					end
				end
			end
			nWidth = nNewWidth
			nHeight = nNewHeight
			tLines = tNewLines
		end
		if bVisible then
			window.redraw()
		end
	end

	if bVisible then
		window.redraw()
	end
	return window
end

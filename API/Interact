--[[
	Interact API in ComputerCraft
	by Creator
	Complete rewrite in OOP
]]--


local textutilsserialize = textutils.serialize
local textutilsunserialize = textutils.unserialize

--Class declarations--
local Button = {}
local Layout = {}
local Toggle = {}
local BackgroundColor = {}
local ColorField = {}
local BetterPaint = {}

--Class Layout--
--Layout initialization function--
Layout.new = function(input)
	local self = {}
	setmetatable(self,{__index = Layout})
	self.Button = {}
	self.Toggle = {}
	self.ColorField = {}
	self.BetterPaint = {}
	self.BackgroundColor = 1
	self.xPos = input.xPos or 1
	self.yPos = input.yPos or 1
	self.xMax = input.xMax or 51
	self.yMax = input.yMax or 19
	self.nilClick = input.nilClick or false
	return self
end

--Add element function--
Layout.addButton = function(self,_elementData)
	self.Button[_elementData.name] = _elementData
end

Layout.addToggle = function(self,_elementData)
	self.Toggle[_elementData.name] = _elementData
end

Layout.addBackgroundColor = function(self,_elementData)
	self.BackgroundColor = _elementData.color
end

Layout.addColorField = function(self,_elementData)
	self.ColorField[_elementData.name] = _elementData
end

Layout.addBetterPaint = function(self,_elementData)
	self.BetterPaint[_elementData.name] = _elementData
end

Layout.draw = function(self)
	local buttonFunctions = {}
	local toggleFunctions = {}
	local colorFieldFunctions = {}
	local betterPaintFunctions = {}
	setmetatable(buttonFunctions,{__index = Button})
	setmetatable(toggleFunctions,{__index = Toggle})
	setmetatable(colorFieldFunctions,{__index = ColorField})
	setmetatable(betterPaintFunctions,{__index = BetterPaint})
	paintutils.drawFilledBox(self.xPos,self.yPos,self.xMax,self.yMax,self.BackgroundColor)
	for i,v in pairs(self.ColorField) do
		colorFieldFunctions.draw(v,self.xPos,self.yPos)
	end
	for i,v in pairs(self.Button) do
		buttonFunctions.draw(v,self.xPos,self.yPos)
	end
	for i,v in pairs(self.BetterPaint) do
		betterPaintFunctions.draw(v,self.xPos,self.yPos)
	end
	for i,v in pairs(self.Toggle) do
		toggleFunctions.draw(v,self.xPos,self.yPos)
	end
end

--Class Button--
--Button initialization function
Button.new = function(input)
	local self = {}
	setmetatable(self,{__index = Button})
	self.name = input.name
	self.label = input.label
	self.xPos = input.xPos
	self.yPos = input.yPos
	self.fgColor = input.fgColor
	self.bgColor = input.bgColor
	self.xLength = input.xLength
	self.yLength = input.yLength
	self.returnValue = input.returnValue
	self.xTextPos = input.xTextPos
	self.yTextPos = input.yTextPos
	return self
end

--Draw function
Button.draw = function(self,layoutX,layoutY,addX,addY)
	layoutX = layoutX or 0
	layoutY = layoutY or 0
	if self.moveX then
		addX = addX or 0
	else
		addX = 0
	end
	if self.moveY then
		addY = addY or 0
	else
		addY = 0
	end
	local finalX = self.xPos + layoutX + addX - 1
	local finalY = self.yPos + layoutY + addY - 1
	local newText
	if #self.label > self.xLength then
		newText = string.sub(self.label,1,self.xLength)
	else
		newText = self.label
	end
	paintutils.drawFilledBox(finalX,finalY,self.xPos+self.xLength-1,self.yPos+self.yLength-1,self.bgColor)
	term.setTextColor(self.fgColor)
	term.setCursorPos(self.xPos+self.xTextPos-1,self.yPos+self.yTextPos-1)
	term.write(newText)
end

--Return function--
Button.returnData = function(self)
	local toReturn = {}
	for i,v in pairs(self) do
		toReturn[i] = v
	end
	return toReturn
end

--Sample Input table--
example = [[
	example = {
		name = "quickSettings",
		label = ">",
		xPos = 1,
		yPos = 3,
		xLength = 1,
		yLength = 6,
		xTextPos = 1,
		yTextPos = 1,
		fgColor = colors.blue,
		bgColor = colors.lightGray,
		returnValue = "quickSettings",
	},
]]

--Class Toggle--
--Initialize Toggle Object--
Toggle.new = function(input)
	local self = {}
	setmetatable(self,{__index = Toggle})
	self.name = input.name or "randomName"
	self.state = input.state or true
	self.xPos = input.xPos or 1
	self.yPos = input.yPos or 1
	self.trueColor = input.trueColor or colors.green
	self.falseColor = input.falseColor or colors.red
	self.trueText = input.trueText or "T"
	self.falseText = input.falseText or "F"
	self.selectedBg = input.selectedBg or colors.gray
	self.notSelectedBg = input.notSelectedBg or colors.lightGray
	self.returnValue = input.returnValue or "mmmmmmm"
	return self
end

Toggle.draw = function(self,layoutX,layoutY,addX,addY)
	layoutX = layoutX or 0
	layoutY = layoutY or 0
	if self.moveX then
		addX = addX or 0
	else
		addX = 0
	end
	if self.moveY then
		addY = addY or 0
	else
		addY = 0
	end
	local finalX = self.xPos + layoutX + addX - 1
	local finalY = self.yPos + layoutY + addY - 1
	term.setCursorPos(finalX,finalY)
	if self.state == false then
		term.setBackgroundColor(self.notSelectedBg)
		term.setTextColor(self.trueColor)
		term.write(string.sub(self.trueText,1,1))
		term.setBackgroundColor(self.selectedBg)
		term.setTextColor(self.falseColor)
		term.write(" "..string.sub(self.falseText,1,1).." ")
	elseif self.state == true then
		term.setBackgroundColor(self.selectedBg)
		term.setTextColor(self.trueColor)
		term.write(" "..string.sub(self.trueText,1,1).." ")
		term.setBackgroundColor(self.notSelectedBg)
		term.setTextColor(self.falseColor)
		term.write(string.sub(self.falseText,1,1))
	end
end

Toggle.returnData = function(self)
	local toReturn = {}
	for i,v in pairs(self) do
		toReturn[i] = v
	end
	return toReturn
end

function Toggle.toggle(self)
	if self.state == true then
		self.state = false
	else
		self.state = true
	end
end

function Toggle.getState(self)
	return self.state
end

--BackgroundColor Class--
function BackgroundColor.new(input)
	local self = {}
	setmetatable(self,{__index = BackgroundColor})
	self.color = input.color
	return self
end

function BackgroundColor.setColor(self,color)
	self.color = color
end

function BackgroundColor.returnData(self)
	local toReturn = {}
	for i,v in pairs(self) do
		toReturn[i] = v
	end
	return toReturn
end

--ColorField Class--
function ColorField.new(input)
	local self = {}
	setmetatable(self,{__index = ColorField})
	self.name = input.name
	self.xPos = input.xPos
	self.yPos = input.yPos
	self.xMax = input.xMax
	self.yMax = input.yMax
	self.color = input.color
	return self
end

function  ColorField.draw(self,layoutX,layoutY,addX,addY)
	layoutX = layoutX or 0
	layoutY = layoutY or 0
	if self.moveX then
		addX = addX or 0
	else
		addX = 0
	end
	if self.moveY then
		addY = addY or 0
	else
		addY = 0
	end
	local finalX = self.xPos + layoutX + addX - 1
	local finalY = self.yPos + layoutY + addY - 1 
	paintutils.drawFilledBox(finalX,finalY,self.xMax,self.yMax,self.color)
end

function ColorField.returnData(self)
	local toReturn = {}
	for i,v in pairs(self) do
		toReturn[i] = v
	end
	return toReturn
end

--BetterPaint Class--
function BetterPaint.new(input)
	local self = {}
	setmetatable(self,{__index = BetterPaint})
	finalX = input.xPos
	finalY = input.yPos
	self.name = input.name
	self.path = input.path
	self.xLength = input.xLength
	self.yLength = input.yLength
	self.returnValue = input.returnValue
	self.label = input.label
	self.labelBg = input.labelBg
	self.labelFg = input.labelFg
	return self
end

function BetterPaint.returnData(self)
	local toReturn = {}
	for i,v in pairs(self) do
		toReturn[i] = v
	end
	return toReturn
end

function BetterPaint.draw(self,layoutX,layoutY,addX,addY)
	layoutX = layoutX or 0
	layoutY = layoutY or 0
	if self.moveX then
		addX = addX or 0
	else
		addX = 0
	end
	if self.moveY then
		addY = addY or 0
	else
		addY = 0
	end
	local finalX = finalX + layoutX + addX - 1
	local finalY = finalY + layoutY + addY - 1
	paint.drawImage(self.path,finalX,finalY)
	term.setCursorPos(finalX,finalY+self.yLength+1)
	term.setTextColor(self.labelFg)
	term.setBackgroundColor(self.labelBg)
	term.write(self.label)
end

--Event handler function--
eventHandler = function(self)
	while true do
		local event, p1, p2, p3, p4, p5, p6 = os.pullEvent()
		if event == "mouse_click" then
			for i,v in pairs(self.Button) do
				if v.xPos <= p2 and p2 <= v.xPos + v.xLength-1 and v.yPos <= p3 and p3 <= v.yPos + v.yLength-1 then
					return {"Button",tostring(v.returnValue)}
				end
			end
			for i,v in pairs(self.Toggle) do
				if v.xPos <= p2 and p2 <= v.xPos + 3 and v.yPos == p3 then
					return {"Toggle",tostring(v.returnValue)}
				end
			end
			for i,v in pairs(self.BetterPaint) do
				if v.xPos <= 
				p2 and
				p2 <= v.xPos + v.xLength-1 and
				v.yPos <= p3 and p3 <= v.yPos + v.yLength-1 then
					return {"Button",tostring(v.returnValue)}
				end
			end
			if not (finalX <= p2 and p2 <= self.xMax and finalY <= p3 and p3 <= self.yMax) then
				if self.nilClick then
					return {"Nil","Nil"}
				end
			end
		elseif event == "key" then
			
		elseif event == "monitor_touch" then
			os.queueEvent("mouse_click", p1, p2, p3, p4, p5, p6)
		end
	end
end

--Load Function--
function Initialize()
	local toReturn = {}
	toReturn.Button = Button
	toReturn.Layout = Layout
	toReturn.Toggle = Toggle
	toReturn.BackgroundColor = BackgroundColor
	toReturn.ColorField = ColorField
	toReturn.BetterPaint = BetterPaint
	toReturn.eventHandler = eventHandler
	return toReturn
end